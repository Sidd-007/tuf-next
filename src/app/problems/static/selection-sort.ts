import { Problem } from "../types";


export const selectionSort: Problem =
{
    "problem_type": "DSA",
    "problem_id": "sorting_sorting_algorithms_selectionsort",
    "problem_slug": "selection-sort",
    "problem_name": "Selection Sort",
    "subject_name": "DSA",
    "subject_slug": "dsa",
    "cat_id": "sorting",
    "subcatid": "sorting_algorithms",
    "rank": 1,
    "difficulty": "Easy",
    "hasIDE": 1,
    "points": 100,
    "problem_statement": "<p>Given an array of integers nums, sort the array in non-decreasing order using the <strong>selection sort</strong> algorithm and return the sorted array.</p><p><br></p><p>A sorted array in non-decreasing order is an array where each element is greater than or equal to all previous elements in the array.</p>",
    "example1": "<p><strong>Input: </strong>nums = [7, 4, 1, 5, 3]</p><p><strong>Output:</strong> [1, 3, 4, 5, 7]</p><p><strong>Explanation:</strong> 1 &lt;= 3 &lt;= 4 &lt;= 5 &lt;= 7.</p><p>Thus the array is sorted in non-decreasing order.</p>",
    "example2": "<p><strong>Input: </strong>nums = [5, 4, 4, 1, 1]</p><p><strong>Output:</strong> [1, 1, 4, 4, 5]</p><p><strong>Explanation:</strong> 1 &lt;= 1 &lt;= 4 &lt;= 4 &lt;= 5.</p><p>Thus the array is sorted in non-decreasing order.</p>",
    "example3": "<p><strong>Input:</strong> nums = [3, 2, 3, 4, 5]</p>",
    "constraints": "<ul><li>1 &lt;= nums.length &lt;= 1000</li><li>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></li><li>nums[i] may contain duplicate values.</li></ul>",
    "languages_supported": {},
    "misc": {
        "tags": [
            "Bungie",
            "Qualcomm",
            "Uber",
            "Morgan Stanley",
            "Zoho",
            "Electronic Arts",
            "Reddit",
            "Ubisoft",
            "PwC",
            "Broadcom",
            "Rakuten",
            "OYO Rooms",
            "Seagate Technology",
            "Epic Games",
            "Nutanix",
            "Target",
            "Pinterest",
            "Boston Consulting Group",
            "Optum",
            "KPMG",
            "JPMorgan Chase",
            "Cerner",
            "MongoDB",
            "Red Hat",
            "McKinsey & Company",
            "TCS",
            "Cognizant",
            "Accenture",
            "Infosys",
            "Capgemini",
            "Wipro"
        ],
        "facts": "Fun Fact: The Selection Sort algorithm, which is the focus of this problem, is widely used in software development for its simplicity and efficiency when dealing with small data sets. It serves as a building block in various applications like e-commerce platforms and database technologies, where sorting of data is an important functionality. In real-world applications, it would often be used as a part of a more complex sorting algorithm to sort small sublists within a larger, more complex, sorting problem.",
        "hints": [
            {
                "hint": "Think Small First, at each step, identify the smallest element in the unsorted portion of the array and place it in its correct position."
            },
            {
                "hint": "Use Divide and Conquer Mindset, visualize sorting as splitting the array into sorted and unsorted parts, and shrinking the unsorted part one element at a time."
            },
            {
                "hint": "Focus on how you can repeatedly compare elements and rearrange them in-place without needing additional memory."
            }
        ],
        "language": [
            "cpp",
            "java",
            "python",
            "javascript",
            "csharp",
            "go"
        ],
        "topicTags": [
            "Array",
            "Sorting",
            "Algorithms"
        ],
        "difficulty": "Easy",
        "similarProblems": [
            {
                "name": "Insertion Sorting",
                "slug": "/insertion-sorting",
                "isPaid": false
            },
            {
                "name": "Merge Sorting",
                "slug": "/merge-sorting",
                "isPaid": false
            },
            {
                "name": "Heap Sort",
                "slug": "/heap-sort",
                "isPaid": false
            },
            {
                "name": "Quick Sorting",
                "slug": "/quick-sorting",
                "isPaid": false
            },
            {
                "name": "Bubble Sort",
                "slug": "/bubble-sort",
                "isPaid": false
            }
        ],
        "frequently_occuring_doubts": [
            {
                "answer": "Yes, selection sort can handle duplicate elements effectively. During each iteration, the algorithm identifies the smallest element in the unsorted portion, even if duplicates exist. The duplicates are treated like any other elements and sorted based on their relative positions, preserving the order among equal elements.",
                "question": "Can selection sort handle duplicate elements properly?"
            },
            {
                "answer": "Selection sort doesn’t check if the array is already sorted—it always performs O(n2) comparisons because the algorithm doesn’t adapt to sorted inputs. While no swaps may occur if the array is sorted, the comparisons in the inner loop are still executed, making it inefficient for pre-sorted data.",
                "question": "What happens if the array is already sorted? Is it still efficient?"
            }
        ],
        "interview_followup_questions": [
            {
                "answer": "To sort the array in descending order, you need to modify the algorithm to find the largest element in the unsorted portion during each iteration instead of the smallest. Then, place this largest element at the current position in the sorted portion.\n\nHere’s the adjusted approach:\n\nIn the inner loop, compare elements to find the maximum instead of the minimum.\nSwap the maximum element with the current index of the sorted portion.\nExample:\nInput: [4, 2, 9, 1]\nProcess:\n\nFind the largest (9) and swap with the first element: [9, 2, 4, 1].\nFind the next largest (4) in the unsorted portion and swap: [9, 4, 2, 1].\nContinue until sorted in descending order: [9, 4, 2, 1].\nThis change preserves the same O(n2) time complexity but adapts the algorithm for descending order.\n",
                "question": "Can you modify the selection sort algorithm to sort the array in descending order? What changes would you make?"
            },
            {
                "answer": "1. Selection sort works in-place and uses O(1) extra memory. For systems with strict memory limitations, it is a viable choice.\n2. For small arrays (e.g., fewer than 10 elements), the simplicity of selection sort can outweigh its inefficiency. The overhead of more complex algorithms, like merge sort or quicksort, might not be justified.\n\nExample: Sorting [5, 2, 1] in embedded systems with limited RAM can efficiently use selection sort.\n",
                "question": "Selection sort has O(n2) time complexity. Can you identify a scenario where selection sort might still be a preferred choice?"
            },
            {
                "answer": "Time Complexity: Both have O(n^2) worst-case time complexity. However, insertion sort can outperform selection sort for nearly sorted arrays because it minimizes shifts, while selection sort always performs n−1 comparisons in the inner loop, regardless of the array's state.\n\nSwaps vs. Shifts: Selection sort minimizes swaps (n−1 swaps in total), making it suitable for situations where swap costs are high (e.g., flash memory). Insertion sort involves more shifts, especially for large unsorted portions.\nExample:\nFor an array like [2, 3, 4, 5, 1], insertion sort will quickly sort it with fewer operations because most elements are already in place. In contrast, selection sort performs the same number of comparisons regardless of the initial order, making it less efficient in this case.",
                "question": "How does selection sort compare to insertion sort in terms of performance and use cases? Can you analyze and contrast them?"
            }
        ]
    },
    "new_editorial": [
        {
            "name": "Solution",
            "asset_id": "ASEQ9UKaDdQ",
            "editorial": "   \n<h3><strong>Intuition</strong></h3>\n        <p>The selection sort algorithm sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The largest element will end up at the last index of the array.</p>\n        <h3><strong>Approach</strong></h3>\n        <ul>\n            <li>Select the starting index of the unsorted part using a loop with <code>i</code> from 0 to n-1.</li>\n            <li>Find the smallest element in the range from <code>i</code> to n-1 using an inner loop.</li>\n            <li>Swap this smallest element with the element at index <code>i</code>.</li>\n            <li>Repeat the process for the next starting index.</li>\n        </ul>\n<h3>Dry Run</h3>\n\n<div class=\"image-carousel-container\"><div class=\"carousel-container\"><div class=\"carousel\"><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////1.svg-4X3WfoMm\" alt=\"Image 1\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////2.svg-tZmsrd4Y\" alt=\"Image 2\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////3.svg-14HzghVo\" alt=\"Image 3\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////4.svg-Gu23yZC8\" alt=\"Image 4\"></div></div><div class=\"control-container\"><div class=\"control-container-2\"><button class=\"image-carousel-arrow image-carousel-left-arrow group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-left\"><path d=\"m15 18-6-6 6-6\" /></svg></button><span class=\"image-number\"></span><button class=\"image-carousel-arrow image-carousel-right-arrow group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-right\"><path d=\"m9 18 6-6-6-6\" /></svg></button></div><div class=\"control-buttons\"><button class=\"image-carousel-control-button image-carousel-play-button group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-play\"><polygon points=\"6 3 20 12 6 21 6 3\" /></svg></button><button class=\"image-carousel-control-button image-carousel-pause-button group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pause\"><rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /><rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /></svg></button><button class=\"image-carousel-control-button image-carousel-down-button group\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-external-link\"><path d=\"M15 3h6v6\"></path><path d=\"M10 14L21 3\"></path><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path></svg></button></div></div></div><div class=\"vertical-view\" id=\"vertical-view\"><img src=\"https://static.takeuforward.org/premium////1.svg-4X3WfoMm\" alt=\"Image 1\"><img src=\"https://static.takeuforward.org/premium////2.svg-tZmsrd4Y\" alt=\"Image 2\"><img src=\"https://static.takeuforward.org/premium////3.svg-14HzghVo\" alt=\"Image 3\"><img src=\"https://static.takeuforward.org/premium////4.svg-Gu23yZC8\" alt=\"Image 4\"></div></div>\n\n\n<h3>Solution</h3>\n<div class=\"code-section secondary-details\"><div class=\"code-tabs\"><div><button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">Cpp</button><button class=\"code-tab\" data-lang=\"java\">Java</button><button class=\"code-tab\" data-lang=\"python\">Python</button><button class=\"code-tab\" data-lang=\"javascript\">Javascript</button><button class=\"code-tab\" data-lang=\"csharp\">CSharp</button><button class=\"code-tab\" data-lang=\"go\">Go</button></div><div class=\"copy-btn\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" />\n    <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" />\n    </svg></div></div><div class=\"code-content\"><div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span></div><pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function for selection sort\n    vector&lt;int&gt; selectionSort(vector&lt;int&gt;&amp; nums) {\n        // Loop through the unsorted array\n        for (int i = 0; i &lt; nums.size() - 1; i++) {\n            /*Assume the current \n            index is the smallest*/\n            int minIndex = i;\n            \n            // Find the index of the smallest element\n            for (int j = i + 1; j &lt;nums.size(); j++) {\n                /*Update minIndex if smaller \n                element is found */\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n        \n            // Swap only if minIndex is changed\n            if (minIndex != i) {\n                swap(nums[minIndex], nums[i]);\n            }\n        }\n        return nums;\n    }\n};\n\nint main() {\n\n    vector&lt;int&gt; arr = {7, 5, 9, 2, 8};\n    \n    cout &lt;&lt; \"Original array: \";\n    for (int num : arr) {\n        cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    // Create an instance of the Solution class\n    Solution s1;\n\n    // function call for Selection Sort\n    vector&lt;int&gt; sortedArr = s1.selectionSort(arr);\n\n    cout &lt;&lt; \"Sorted array: \";\n    for (int num : sortedArr) {\n        cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}</code></pre></div><div class=\"code-block\" data-lang=\"java\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span></div><pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Solution {\n\n  public int[] selectionSort(int[] nums) {\n    // Loop through unsorted part of the array (0 to n-2)\n    for (int i = 0; i &lt; nums.length - 1; i++) {\n      /*Assume current element \n      is the minimum*/\n      int minIndex = i;\n\n      // Find actual minimum in unsorted part (i+1 to n-1)\n      for (int j = i + 1; j &lt; nums.length; j++) {\n        if (nums[j] &lt; nums[minIndex]) {\n          minIndex = j;\n        }\n      }\n\n      // Swap only if minIndex changed\n      if (minIndex != i) {\n        int temp = nums[i];\n        nums[i] = nums[minIndex];\n        nums[minIndex] = temp;\n      }\n    }\n\n    return nums;\n  }\n}\n\npublic class Main {\n\n  public static void main(String[] args) {\n    int[] arr = {7, 5, 9, 2, 8};\n\n    System.out.print(\"Original array: \");\n    for (int num : arr) {\n      System.out.print(num + \" \");\n    }\n    System.out.println();\n\n    // create an instance of solution class\n    Solution solution = new Solution();\n\n    // function call for selection sort\n    int[] sortedArr = solution.selectionSort(arr);\n\n    System.out.print(\"Sorted array: \");\n    for (int num : sortedArr) {\n      System.out.print(num + \" \");\n    }\n    System.out.println();\n  }\n}</code></pre></div><div class=\"code-block\" data-lang=\"python\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span></div><pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Solution:\n    def selectionSort(self, nums):\n        # Loop through unsorted part \n        # of the array (0 to n-2)\n        for i in range(len(nums) - 1):\n            ''' Assume current \n            element is minimum '''\n            min_index = i\n\n            '''Find actual minimum in \n            unsorted part (i+1 to n-1) '''\n            for j in range(i + 1, len(nums)):\n                if nums[j] &lt; nums[min_index]:\n                    min_index = j\n\n            ''' Swap only if minIndex \n            changed (optimization) '''\n            if min_index != i:\n                nums[i], nums[min_index] = nums[min_index], nums[i]\n\n        return nums\n\n# Main function to test the selection sort\nif __name__ == \"__main__\":\n    solution = Solution()\n    nums = [64, 25, 12, 22, 11]\n    sorted_nums = solution.selectionSort(nums)\n    print(\"Sorted array:\", sorted_nums)\n</code></pre></div><div class=\"code-block\" data-lang=\"javascript\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span></div><pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Solution {\n    selectionSort(nums) {\n        // Loop through unsorted part of the array (0 to n-2)\n        for (let i = 0; i &lt; nums.length - 1; i++) {\n            // Assume current element is the minimum\n            let minIndex = i;\n\n            // Find actual minimum in unsorted part (i+1 to n-1)\n            for (let j = i + 1; j &lt; nums.length; j++) {\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n\n            // Swap only if minIndex changed (optimization)\n            if (minIndex != i) {\n                [nums[i], nums[minIndex]] = [nums[minIndex], nums[i]];\n            }\n        }\n\n        return nums;\n    }\n}\n\n// Example usage:\nconst solution = new Solution();\nconsole.log(solution.selectionSort([64, 25, 12, 22, 11]));\n</code></pre></div><div class=\"code-block\" data-lang=\"csharp\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span></div><pre class=\"wp-block-code\"><code lang=\"csharp\" class=\"language-csharp\">using System;\n\npublic class Solution {\n    // Function for selection sort\n    public int[] SelectionSort(int[] nums) {\n        // Loop through the unsorted array\n        for (int i = 0; i &lt; nums.Length - 1; i++) {\n            /*Assume the current \n            index is the smallest*/\n            int minIndex = i;\n            \n            // Find the index of the smallest element\n            for (int j = i + 1; j &lt; nums.Length; j++) {\n                /*Update minIndex if smaller \n                element is found */\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n        \n            // Swap only if minIndex is changed\n            if (minIndex != i) {\n                int temp = nums[minIndex];\n                nums[minIndex] = nums[i];\n                nums[i] = temp;\n            }\n        }\n        return nums;\n    }\n}\n\nclass Program {\n    static void Main() {\n        int[] arr = {7, 5, 9, 2, 8};\n        \n        Console.Write(\"Original array: \");\n        foreach (int num in arr) {\n            Console.Write(num + \" \");\n        }\n        Console.WriteLine();\n        \n        // Create an instance of the Solution class\n        Solution s1 = new Solution();\n        \n        // function call for Selection Sort\n        int[] sortedArr = s1.SelectionSort(arr);\n        \n        Console.Write(\"Sorted array: \");\n        foreach (int num in sortedArr) {\n            Console.Write(num + \" \");\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre></div><div class=\"code-block\" data-lang=\"go\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span><span>56</span></div><pre class=\"wp-block-code\"><code lang=\"go\" class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n)\n\n// Function for selection sort\nfunc selectionSort(nums []int) []int {\n    // Loop through the unsorted array\n    for i := 0; i &lt; len(nums)-1; i++ {\n        /* Assume the current \n        index is the smallest */\n        minIndex := i\n\n        // Find the index of the smallest element\n        for j := i + 1; j &lt; len(nums); j++ {\n            /* Update minIndex if smaller \n            element is found */\n            if nums[j] &lt; nums[minIndex] {\n                minIndex = j\n            }\n        }\n\n        // Swap only if minIndex is changed\n        if minIndex != i {\n            nums[minIndex], nums[i] = nums[i], nums[minIndex]\n        }\n    }\n    return nums\n}\n\nfunc main() {\n    arr := []int{7, 5, 9, 2, 8}\n\n    fmt.Print(\"Original array: \")\n    for _, num := range arr {\n        fmt.Print(num, \" \")\n    }\n    fmt.Println()\n\n    // function call for Selection Sort\n    sortedArr := selectionSort(arr)\n\n    fmt.Print(\"Sorted array: \")\n    for _, num := range sortedArr {\n        fmt.Print(num, \" \")\n    }\n    fmt.Println()\n}\n</code></pre></div></div></div>\n\n<h3><strong>Complexity Analysis &nbsp;</strong></h3>\n        <p><strong>Time Complexity: O(N<sup>2</sup>)</strong>  where N is the length of the input array. The outer loop runs through each element, and the inner loop finds the smallest element in the unsorted portion of the array.</p>\n        <p><strong>Space Complexity: O(1)</strong>  as it is an in-place sorting algorithm and does not require additional storage proportional to the input size.</p>"
        }
    ],
    "inputAndOutputStructure": {
        "input_structure": [
            {
                "type": "array",
                "label": "nums",
                "subtype": "integer"
            }
        ],
        "output_structure": {
            "type": "array"
        }
    },
    "hasGamification": 1,
    "gamificationOptions": [
        "[2, 3, 3, 4, 4]",
        "[2, 3, 3, 4, 5]",
        "[2, 3, 3, 4, 9]",
        "[2, 3, 3, 4, 0]"
    ],
    "gamification_ouput": "[2, 3, 3, 4, 5]",
    "testcases": [
        {
            "inputs": {
                "nums": "[7 ,4 ,1 ,5 ,3]"
            },
            "parsedInput": "1\nTestCase-1\n5\n7 4 1 5 3",
            "parsedOutput": "TestCase-1\n1 3 4 5 7"
        },
        {
            "inputs": {
                "nums": "[5 ,4 ,4 ,1 ,1]"
            },
            "parsedInput": "1\nTestCase-1\n5\n5 4 4 1 1",
            "parsedOutput": "TestCase-1\n1 1 4 4 5"
        },
        {
            "inputs": {
                "nums": "[4 ,2 ,8 ,6 ,9]"
            },
            "parsedInput": "1\nTestCase-1\n5\n4 2 8 6 9",
            "parsedOutput": "TestCase-1\n2 4 6 8 9"
        }
    ],
    "publicCpp": "class Solution {\npublic:\n    vector<int> selectionSort(vector<int>& nums) {\n\n    }\n};\n",
    "publicJava": "class Solution {\n    public int[] selectionSort(int[] nums) {\n\n    }\n}",
    "publicPy": "class Solution:\n    def selectionSort(self, nums):",
    "publicJs": "class Solution {\n    selectionSort(nums) {\n\n    }\n}",
    "publicCsharp": "public class Solution {\n    public int[] SelectionSort(int[] nums) {\n    \n    }\n}",
    "publicGo": "func selectionSort(nums []int) []int {\n\n}",
    "dsa_editorial_data": [
        {
            "id": 1,
            "name": "Solution",
            "editorial": "   \n<h3><strong>Intuition</strong></h3>\n        <p>The selection sort algorithm sorts an array by repeatedly finding the minimum element from the unsorted part and putting it at the beginning. The largest element will end up at the last index of the array.</p>\n        <h3><strong>Approach</strong></h3>\n        <ul>\n            <li>Select the starting index of the unsorted part using a loop with <code>i</code> from 0 to n-1.</li>\n            <li>Find the smallest element in the range from <code>i</code> to n-1 using an inner loop.</li>\n            <li>Swap this smallest element with the element at index <code>i</code>.</li>\n            <li>Repeat the process for the next starting index.</li>\n        </ul>\n<h3>Dry Run</h3>\n\n<div class=\"image-carousel-container\"><div class=\"carousel-container\"><div class=\"carousel\"><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////1.svg-4X3WfoMm\" alt=\"Image 1\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////2.svg-tZmsrd4Y\" alt=\"Image 2\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////3.svg-14HzghVo\" alt=\"Image 3\"></div><div class=\"carousel-image\"><img src=\"https://static.takeuforward.org/premium////4.svg-Gu23yZC8\" alt=\"Image 4\"></div></div><div class=\"control-container\"><div class=\"control-container-2\"><button class=\"image-carousel-arrow image-carousel-left-arrow group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-left\"><path d=\"m15 18-6-6 6-6\" /></svg></button><span class=\"image-number\"></span><button class=\"image-carousel-arrow image-carousel-right-arrow group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-right\"><path d=\"m9 18 6-6-6-6\" /></svg></button></div><div class=\"control-buttons\"><button class=\"image-carousel-control-button image-carousel-play-button group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-play\"><polygon points=\"6 3 20 12 6 21 6 3\" /></svg></button><button class=\"image-carousel-control-button image-carousel-pause-button group\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pause\"><rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /><rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /></svg></button><button class=\"image-carousel-control-button image-carousel-down-button group\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-external-link\"><path d=\"M15 3h6v6\"></path><path d=\"M10 14L21 3\"></path><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path></svg></button></div></div></div><div class=\"vertical-view\" id=\"vertical-view\"><img src=\"https://static.takeuforward.org/premium////1.svg-4X3WfoMm\" alt=\"Image 1\"><img src=\"https://static.takeuforward.org/premium////2.svg-tZmsrd4Y\" alt=\"Image 2\"><img src=\"https://static.takeuforward.org/premium////3.svg-14HzghVo\" alt=\"Image 3\"><img src=\"https://static.takeuforward.org/premium////4.svg-Gu23yZC8\" alt=\"Image 4\"></div></div>\n\n\n<h3>Solution</h3>\n<div class=\"code-section secondary-details\"><div class=\"code-tabs\"><div><button class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\">Cpp</button><button class=\"code-tab\" data-lang=\"java\">Java</button><button class=\"code-tab\" data-lang=\"python\">Python</button><button class=\"code-tab\" data-lang=\"javascript\">Javascript</button><button class=\"code-tab\" data-lang=\"csharp\">CSharp</button><button class=\"code-tab\" data-lang=\"go\">Go</button></div><div class=\"copy-btn\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <rect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" />\n    <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" />\n    </svg></div></div><div class=\"code-content\"><div class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span></div><pre class=\"wp-block-code\"><code lang=\"cpp\" class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function for selection sort\n    vector&lt;int&gt; selectionSort(vector&lt;int&gt;&amp; nums) {\n        // Loop through the unsorted array\n        for (int i = 0; i &lt; nums.size() - 1; i++) {\n            /*Assume the current \n            index is the smallest*/\n            int minIndex = i;\n            \n            // Find the index of the smallest element\n            for (int j = i + 1; j &lt;nums.size(); j++) {\n                /*Update minIndex if smaller \n                element is found */\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n        \n            // Swap only if minIndex is changed\n            if (minIndex != i) {\n                swap(nums[minIndex], nums[i]);\n            }\n        }\n        return nums;\n    }\n};\n\nint main() {\n\n    vector&lt;int&gt; arr = {7, 5, 9, 2, 8};\n    \n    cout &lt;&lt; \"Original array: \";\n    for (int num : arr) {\n        cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    // Create an instance of the Solution class\n    Solution s1;\n\n    // function call for Selection Sort\n    vector&lt;int&gt; sortedArr = s1.selectionSort(arr);\n\n    cout &lt;&lt; \"Sorted array: \";\n    for (int num : sortedArr) {\n        cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}</code></pre></div><div class=\"code-block\" data-lang=\"java\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span></div><pre class=\"wp-block-code\"><code lang=\"java\" class=\"language-java\">import java.util.*;\nclass Solution {\n\n  public int[] selectionSort(int[] nums) {\n    // Loop through unsorted part of the array (0 to n-2)\n    for (int i = 0; i &lt; nums.length - 1; i++) {\n      /*Assume current element \n      is the minimum*/\n      int minIndex = i;\n\n      // Find actual minimum in unsorted part (i+1 to n-1)\n      for (int j = i + 1; j &lt; nums.length; j++) {\n        if (nums[j] &lt; nums[minIndex]) {\n          minIndex = j;\n        }\n      }\n\n      // Swap only if minIndex changed\n      if (minIndex != i) {\n        int temp = nums[i];\n        nums[i] = nums[minIndex];\n        nums[minIndex] = temp;\n      }\n    }\n\n    return nums;\n  }\n}\n\npublic class Main {\n\n  public static void main(String[] args) {\n    int[] arr = {7, 5, 9, 2, 8};\n\n    System.out.print(\"Original array: \");\n    for (int num : arr) {\n      System.out.print(num + \" \");\n    }\n    System.out.println();\n\n    // create an instance of solution class\n    Solution solution = new Solution();\n\n    // function call for selection sort\n    int[] sortedArr = solution.selectionSort(arr);\n\n    System.out.print(\"Sorted array: \");\n    for (int num : sortedArr) {\n      System.out.print(num + \" \");\n    }\n    System.out.println();\n  }\n}</code></pre></div><div class=\"code-block\" data-lang=\"python\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span></div><pre class=\"wp-block-code\"><code lang=\"python\" class=\"language-python\">class Solution:\n    def selectionSort(self, nums):\n        # Loop through unsorted part \n        # of the array (0 to n-2)\n        for i in range(len(nums) - 1):\n            ''' Assume current \n            element is minimum '''\n            min_index = i\n\n            '''Find actual minimum in \n            unsorted part (i+1 to n-1) '''\n            for j in range(i + 1, len(nums)):\n                if nums[j] &lt; nums[min_index]:\n                    min_index = j\n\n            ''' Swap only if minIndex \n            changed (optimization) '''\n            if min_index != i:\n                nums[i], nums[min_index] = nums[min_index], nums[i]\n\n        return nums\n\n# Main function to test the selection sort\nif __name__ == \"__main__\":\n    solution = Solution()\n    nums = [64, 25, 12, 22, 11]\n    sorted_nums = solution.selectionSort(nums)\n    print(\"Sorted array:\", sorted_nums)\n</code></pre></div><div class=\"code-block\" data-lang=\"javascript\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span></div><pre class=\"wp-block-code\"><code lang=\"javascript\" class=\"language-javascript\">class Solution {\n    selectionSort(nums) {\n        // Loop through unsorted part of the array (0 to n-2)\n        for (let i = 0; i &lt; nums.length - 1; i++) {\n            // Assume current element is the minimum\n            let minIndex = i;\n\n            // Find actual minimum in unsorted part (i+1 to n-1)\n            for (let j = i + 1; j &lt; nums.length; j++) {\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n\n            // Swap only if minIndex changed (optimization)\n            if (minIndex != i) {\n                [nums[i], nums[minIndex]] = [nums[minIndex], nums[i]];\n            }\n        }\n\n        return nums;\n    }\n}\n\n// Example usage:\nconst solution = new Solution();\nconsole.log(solution.selectionSort([64, 25, 12, 22, 11]));\n</code></pre></div><div class=\"code-block\" data-lang=\"csharp\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span></div><pre class=\"wp-block-code\"><code lang=\"csharp\" class=\"language-csharp\">using System;\n\npublic class Solution {\n    // Function for selection sort\n    public int[] SelectionSort(int[] nums) {\n        // Loop through the unsorted array\n        for (int i = 0; i &lt; nums.Length - 1; i++) {\n            /*Assume the current \n            index is the smallest*/\n            int minIndex = i;\n            \n            // Find the index of the smallest element\n            for (int j = i + 1; j &lt; nums.Length; j++) {\n                /*Update minIndex if smaller \n                element is found */\n                if (nums[j] &lt; nums[minIndex]) {\n                    minIndex = j;\n                }\n            }\n        \n            // Swap only if minIndex is changed\n            if (minIndex != i) {\n                int temp = nums[minIndex];\n                nums[minIndex] = nums[i];\n                nums[i] = temp;\n            }\n        }\n        return nums;\n    }\n}\n\nclass Program {\n    static void Main() {\n        int[] arr = {7, 5, 9, 2, 8};\n        \n        Console.Write(\"Original array: \");\n        foreach (int num in arr) {\n            Console.Write(num + \" \");\n        }\n        Console.WriteLine();\n        \n        // Create an instance of the Solution class\n        Solution s1 = new Solution();\n        \n        // function call for Selection Sort\n        int[] sortedArr = s1.SelectionSort(arr);\n        \n        Console.Write(\"Sorted array: \");\n        foreach (int num in sortedArr) {\n            Console.Write(num + \" \");\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre></div><div class=\"code-block\" data-lang=\"go\"><div class=\"line-numbers line-num\"><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span><span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span><span>16</span><span>17</span><span>18</span><span>19</span><span>20</span><span>21</span><span>22</span><span>23</span><span>24</span><span>25</span><span>26</span><span>27</span><span>28</span><span>29</span><span>30</span><span>31</span><span>32</span><span>33</span><span>34</span><span>35</span><span>36</span><span>37</span><span>38</span><span>39</span><span>40</span><span>41</span><span>42</span><span>43</span><span>44</span><span>45</span><span>46</span><span>47</span><span>48</span><span>49</span><span>50</span><span>51</span><span>52</span><span>53</span><span>54</span><span>55</span><span>56</span></div><pre class=\"wp-block-code\"><code lang=\"go\" class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n)\n\n// Function for selection sort\nfunc selectionSort(nums []int) []int {\n    // Loop through the unsorted array\n    for i := 0; i &lt; len(nums)-1; i++ {\n        /* Assume the current \n        index is the smallest */\n        minIndex := i\n\n        // Find the index of the smallest element\n        for j := i + 1; j &lt; len(nums); j++ {\n            /* Update minIndex if smaller \n            element is found */\n            if nums[j] &lt; nums[minIndex] {\n                minIndex = j\n            }\n        }\n\n        // Swap only if minIndex is changed\n        if minIndex != i {\n            nums[minIndex], nums[i] = nums[i], nums[minIndex]\n        }\n    }\n    return nums\n}\n\nfunc main() {\n    arr := []int{7, 5, 9, 2, 8}\n\n    fmt.Print(\"Original array: \")\n    for _, num := range arr {\n        fmt.Print(num, \" \")\n    }\n    fmt.Println()\n\n    // function call for Selection Sort\n    sortedArr := selectionSort(arr)\n\n    fmt.Print(\"Sorted array: \")\n    for _, num := range sortedArr {\n        fmt.Print(num, \" \")\n    }\n    fmt.Println()\n}\n</code></pre></div></div></div>\n\n<h3><strong>Complexity Analysis &nbsp;</strong></h3>\n        <p><strong>Time Complexity: O(N<sup>2</sup>)</strong>  where N is the length of the input array. The outer loop runs through each element, and the inner loop finds the smallest element in the unsorted portion of the array.</p>\n        <p><strong>Space Complexity: O(1)</strong>  as it is an in-place sorting algorithm and does not require additional storage proportional to the input size.</p>",
            "placeholder": "https://app.tpstreams.com/embed/atsjxr/ASEQ9UKaDdQ/?access_token=33e345b1-9f22-4382-8c5c-7e49a75d8027&playRates=0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4"
        }
    ],
    "totalLikes": 195,
    "totalDislikes": 5
};
